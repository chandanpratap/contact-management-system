[{"/home/chandan/MYPROJECTS/contactManagementSystem/cms/src/index.js":"1","/home/chandan/MYPROJECTS/contactManagementSystem/cms/src/App.js":"2","/home/chandan/MYPROJECTS/contactManagementSystem/cms/src/reportWebVitals.js":"3","/home/chandan/MYPROJECTS/contactManagementSystem/cms/src/components/ContactList/index.js":"4","/home/chandan/MYPROJECTS/contactManagementSystem/cms/src/components/ContactList/Camera.js":"5","/home/chandan/MYPROJECTS/contactManagementSystem/cms/src/components/ImagePreview/index.js":"6"},{"size":500,"mtime":1610541039035,"results":"7","hashOfConfig":"8"},{"size":2546,"mtime":1610606569995,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1610541039035,"results":"10","hashOfConfig":"8"},{"size":648,"mtime":1610551658007,"results":"11","hashOfConfig":"8"},{"size":672,"mtime":1610606439390,"results":"12","hashOfConfig":"8"},{"size":483,"mtime":1610606036526,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"ns0jum",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"/home/chandan/MYPROJECTS/contactManagementSystem/cms/src/index.js",[],["30","31"],"/home/chandan/MYPROJECTS/contactManagementSystem/cms/src/App.js",["32"],"import React from \"react\";\nimport \"./App.css\";\nimport ListItems from \"./components/ContactList/\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport WebcamCapture from \"./components/ContactList/Camera\";\nlibrary.add(faTrash);\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: \"\",\n      data: [],\n      filterData: [],\n      query: \"\",\n    };\n  }\n\n  changeHandler = (e) => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleInputChange = (event) => {\n    const query = event.target.value;\n\n    this.setState((prevState) => {\n      const filteredData = prevState.data.filter((element) => {\n        return element.name.toLowerCase().includes(query.toLowerCase());\n      });\n\n      this.setState({ filterData: filteredData, query: query });\n    });\n  };\n\n  addData = (e) => {\n    e.preventDefault();\n    let newData = { name: this.state.inputValue, key: Date.now() };\n    this.setState((prevState) => ({\n      data: [...prevState.data, newData],\n      filterData: [...prevState.filterData, newData],\n    }));\n    this.setState({ inputValue: \"\" });\n  };\n\n  deleteItem = (id) => {\n    const filterData = this.state.data.filter((item, key) => key !== id);\n\n    this.setState({ data: filterData, filterData: filterData });\n  };\n\n  changeName = (name, key) => {\n    const data = this.state.data;\n    data.map((item) => {\n      if (item.key === key) {\n        item.name = name;\n      }\n    });\n    this.setState({ data: data, filterData: data });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <WebcamCapture />\n        <div className=\"searchForm\">\n          <div className=\"add-button\">\n            <form id=\"add-item\">\n              <input\n                placeholder=\"Search for...\"\n                value={this.state.query}\n                onChange={this.handleInputChange}\n              />\n            </form>\n          </div>\n        </div>\n        <header>\n          <form id=\"add-item\" onSubmit={this.addData}>\n            <input\n              type=\"text\"\n              placeholder=\"enter text\"\n              value={this.state.inputValue}\n              onChange={this.changeHandler}\n            />\n            <button type=\"submit\">+Add</button>\n          </form>\n        </header>\n        <ListItems\n          data={this.state.filterData}\n          changeName={this.changeName}\n          deleteItem={this.deleteItem}\n        />\n      </div>\n    );\n  }\n}\n","/home/chandan/MYPROJECTS/contactManagementSystem/cms/src/reportWebVitals.js",[],"/home/chandan/MYPROJECTS/contactManagementSystem/cms/src/components/ContactList/index.js",[],"/home/chandan/MYPROJECTS/contactManagementSystem/cms/src/components/ContactList/Camera.js",[],"/home/chandan/MYPROJECTS/contactManagementSystem/cms/src/components/ImagePreview/index.js",["33"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./imagePreview.css\";\n\nexport const ImagePreview = ({ dataUri, isFullscreen }) => {\n  let classNameFullscreen = isFullscreen ? \"demo-image-preview-fullscreen\" : \"\";\n\n  return (\n    <div className={\"demo-image-preview \" + classNameFullscreen}>\n      <img src={dataUri} />\n    </div>\n  );\n};\n\nImagePreview.propTypes = {\n  dataUri: PropTypes.string,\n  isFullscreen: PropTypes.bool,\n};\n\nexport default ImagePreview;\n",["34","35"],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":54,"column":21,"nodeType":"42","messageId":"43","endLine":54,"endColumn":23},{"ruleId":"44","severity":1,"message":"45","line":11,"column":7,"nodeType":"46","endLine":11,"endColumn":28},{"ruleId":"36","replacedBy":"47"},{"ruleId":"38","replacedBy":"48"},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["49"],["50"],"no-global-assign","no-unsafe-negation"]